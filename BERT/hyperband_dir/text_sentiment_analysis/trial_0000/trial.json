{"trial_id": "0000", "hyperparameters": {"space": [{"class_name": "Int", "config": {"name": "num_layers", "default": null, "conditions": [], "min_value": 1, "max_value": 3, "step": 1, "sampling": "linear"}}, {"class_name": "Choice", "config": {"name": "units_0", "default": 32, "conditions": [], "values": [32, 64, 128], "ordered": true}}, {"class_name": "Float", "config": {"name": "dropout_0", "default": 0.1, "conditions": [], "min_value": 0.1, "max_value": 0.5, "step": 0.1, "sampling": "linear"}}, {"class_name": "Choice", "config": {"name": "learning_rate", "default": 1e-05, "conditions": [], "values": [1e-05, 3e-05, 0.0001], "ordered": true}}, {"class_name": "Choice", "config": {"name": "units_1", "default": 32, "conditions": [], "values": [32, 64, 128], "ordered": true}}, {"class_name": "Float", "config": {"name": "dropout_1", "default": 0.1, "conditions": [], "min_value": 0.1, "max_value": 0.5, "step": 0.1, "sampling": "linear"}}, {"class_name": "Choice", "config": {"name": "units_2", "default": 32, "conditions": [], "values": [32, 64, 128], "ordered": true}}, {"class_name": "Float", "config": {"name": "dropout_2", "default": 0.1, "conditions": [], "min_value": 0.1, "max_value": 0.5, "step": 0.1, "sampling": "linear"}}], "values": {"num_layers": 3, "units_0": 32, "dropout_0": 0.30000000000000004, "learning_rate": 3e-05, "tuner/epochs": 2, "tuner/initial_epoch": 0, "tuner/bracket": 2, "tuner/round": 0, "units_1": 32, "dropout_1": 0.1, "units_2": 32, "dropout_2": 0.1}}, "metrics": {"metrics": {}}, "score": null, "best_step": 0, "status": "FAILED", "message": "Traceback (most recent call last):\n  File \"c:\\Users\\admin-npatel237\\AppData\\Local\\anaconda3\\envs\\Text-Analysis\\lib\\site-packages\\keras_tuner\\src\\engine\\base_tuner.py\", line 274, in _try_run_and_update_trial\n    self._run_and_update_trial(trial, *fit_args, **fit_kwargs)\n  File \"c:\\Users\\admin-npatel237\\AppData\\Local\\anaconda3\\envs\\Text-Analysis\\lib\\site-packages\\keras_tuner\\src\\engine\\base_tuner.py\", line 239, in _run_and_update_trial\n    results = self.run_trial(trial, *fit_args, **fit_kwargs)\n  File \"c:\\Users\\admin-npatel237\\AppData\\Local\\anaconda3\\envs\\Text-Analysis\\lib\\site-packages\\keras_tuner\\src\\tuners\\hyperband.py\", line 427, in run_trial\n    return super().run_trial(trial, *fit_args, **fit_kwargs)\n  File \"c:\\Users\\admin-npatel237\\AppData\\Local\\anaconda3\\envs\\Text-Analysis\\lib\\site-packages\\keras_tuner\\src\\engine\\tuner.py\", line 314, in run_trial\n    obj_value = self._build_and_fit_model(trial, *args, **copied_kwargs)\n  File \"c:\\Users\\admin-npatel237\\AppData\\Local\\anaconda3\\envs\\Text-Analysis\\lib\\site-packages\\keras_tuner\\src\\engine\\tuner.py\", line 233, in _build_and_fit_model\n    results = self.hypermodel.fit(hp, model, *args, **kwargs)\n  File \"c:\\Users\\admin-npatel237\\AppData\\Local\\anaconda3\\envs\\Text-Analysis\\lib\\site-packages\\keras_tuner\\src\\engine\\hypermodel.py\", line 149, in fit\n    return model.fit(*args, **kwargs)\n  File \"c:\\Users\\admin-npatel237\\AppData\\Local\\anaconda3\\envs\\Text-Analysis\\lib\\site-packages\\keras\\utils\\traceback_utils.py\", line 70, in error_handler\n    raise e.with_traceback(filtered_tb) from None\n  File \"C:\\Users\\ADMIN-~2\\AppData\\Local\\Temp\\__autograph_generated_file6tqaa4mw.py\", line 15, in tf__train_function\n    retval_ = ag__.converted_call(ag__.ld(step_function), (ag__.ld(self), ag__.ld(iterator)), None, fscope)\n  File \"C:\\Users\\ADMIN-~2\\AppData\\Local\\Temp\\__autograph_generated_file825oj9nk.py\", line 74, in tf__call\n    ag__.if_stmt(ag__.not_(ag__.ld(self)._has_training_argument), if_body_3, else_body_3, get_state_3, set_state_3, ('result', 'training'), 1)\n  File \"C:\\Users\\ADMIN-~2\\AppData\\Local\\Temp\\__autograph_generated_file825oj9nk.py\", line 72, in else_body_3\n    result = ag__.converted_call(ag__.ld(smart_cond).smart_cond, (ag__.ld(training), ag__.autograph_artifact(lambda : ag__.converted_call(ag__.ld(f), (), dict(training=True), fscope)), ag__.autograph_artifact(lambda : ag__.converted_call(ag__.ld(f), (), dict(training=False), fscope))), None, fscope)\n  File \"C:\\Users\\ADMIN-~2\\AppData\\Local\\Temp\\__autograph_generated_file825oj9nk.py\", line 72, in <lambda>\n    result = ag__.converted_call(ag__.ld(smart_cond).smart_cond, (ag__.ld(training), ag__.autograph_artifact(lambda : ag__.converted_call(ag__.ld(f), (), dict(training=True), fscope)), ag__.autograph_artifact(lambda : ag__.converted_call(ag__.ld(f), (), dict(training=False), fscope))), None, fscope)\nValueError: in user code:\n\n    File \"c:\\Users\\admin-npatel237\\AppData\\Local\\anaconda3\\envs\\Text-Analysis\\lib\\site-packages\\keras\\engine\\training.py\", line 1160, in train_function  *\n        return step_function(self, iterator)\n    File \"c:\\Users\\admin-npatel237\\AppData\\Local\\anaconda3\\envs\\Text-Analysis\\lib\\site-packages\\keras\\engine\\training.py\", line 1146, in step_function  **\n        outputs = model.distribute_strategy.run(run_step, args=(data,))\n    File \"c:\\Users\\admin-npatel237\\AppData\\Local\\anaconda3\\envs\\Text-Analysis\\lib\\site-packages\\keras\\engine\\training.py\", line 1135, in run_step  **\n        outputs = model.train_step(data)\n    File \"c:\\Users\\admin-npatel237\\AppData\\Local\\anaconda3\\envs\\Text-Analysis\\lib\\site-packages\\keras\\engine\\training.py\", line 993, in train_step\n        y_pred = self(x, training=True)\n    File \"c:\\Users\\admin-npatel237\\AppData\\Local\\anaconda3\\envs\\Text-Analysis\\lib\\site-packages\\keras\\utils\\traceback_utils.py\", line 70, in error_handler\n        raise e.with_traceback(filtered_tb) from None\n    File \"C:\\Users\\ADMIN-~2\\AppData\\Local\\Temp\\__autograph_generated_file825oj9nk.py\", line 74, in tf__call\n        ag__.if_stmt(ag__.not_(ag__.ld(self)._has_training_argument), if_body_3, else_body_3, get_state_3, set_state_3, ('result', 'training'), 1)\n    File \"C:\\Users\\ADMIN-~2\\AppData\\Local\\Temp\\__autograph_generated_file825oj9nk.py\", line 72, in else_body_3\n        result = ag__.converted_call(ag__.ld(smart_cond).smart_cond, (ag__.ld(training), ag__.autograph_artifact(lambda : ag__.converted_call(ag__.ld(f), (), dict(training=True), fscope)), ag__.autograph_artifact(lambda : ag__.converted_call(ag__.ld(f), (), dict(training=False), fscope))), None, fscope)\n    File \"C:\\Users\\ADMIN-~2\\AppData\\Local\\Temp\\__autograph_generated_file825oj9nk.py\", line 72, in <lambda>\n        result = ag__.converted_call(ag__.ld(smart_cond).smart_cond, (ag__.ld(training), ag__.autograph_artifact(lambda : ag__.converted_call(ag__.ld(f), (), dict(training=True), fscope)), ag__.autograph_artifact(lambda : ag__.converted_call(ag__.ld(f), (), dict(training=False), fscope))), None, fscope)\n\n    ValueError: Exception encountered when calling layer \"keras_layer\" \"                 f\"(type KerasLayer).\n    \n    in user code:\n    \n        File \"c:\\Users\\admin-npatel237\\AppData\\Local\\anaconda3\\envs\\Text-Analysis\\lib\\site-packages\\tensorflow_hub\\keras_layer.py\", line 250, in call  *\n            result = smart_cond.smart_cond(training,\n    \n        ValueError: Could not find matching concrete function to call loaded from the SavedModel. Got:\n          Positional arguments (3 total):\n            * <tf.Tensor 'inputs:0' shape=() dtype=string>\n            * False\n            * None\n          Keyword arguments: {}\n        \n         Expected these arguments to match one of the following 4 option(s):\n        \n        Option 1:\n          Positional arguments (3 total):\n            * TensorSpec(shape=(None,), dtype=tf.string, name='sentences')\n            * False\n            * None\n          Keyword arguments: {}\n        \n        Option 2:\n          Positional arguments (3 total):\n            * TensorSpec(shape=(None,), dtype=tf.string, name='sentences')\n            * True\n            * None\n          Keyword arguments: {}\n        \n        Option 3:\n          Positional arguments (3 total):\n            * TensorSpec(shape=(None,), dtype=tf.string, name='inputs')\n            * False\n            * None\n          Keyword arguments: {}\n        \n        Option 4:\n          Positional arguments (3 total):\n            * TensorSpec(shape=(None,), dtype=tf.string, name='inputs')\n            * True\n            * None\n          Keyword arguments: {}\n    \n    \n    Call arguments received by layer \"keras_layer\" \"                 f\"(type KerasLayer):\n      \u2022 inputs=tf.Tensor(shape=(), dtype=string)\n      \u2022 training=True\n\n"}